#region License

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#endregion

namespace Endjin.Templify.Specifications
{
    #region Using Directives

    using System;
    using System.Collections.Generic;

    using Endjin.Templify.Domain.Contracts.Packager.Processors;
    using Endjin.Templify.Domain.Domain.Packager.Tokeniser;
    using Endjin.Templify.Domain.Domain.Packages;

    using Machine.Specifications;
    using Machine.Specifications.AutoMocking.Rhino;

    using Rhino.Mocks;

    #endregion

    public abstract class specification_for_package_tokeniser : Specification<PackageTokeniser>
    {
        protected static IRenameFileProcessor rename_file_processor;
        protected static Package package_to_clone;

        Establish context = () =>
            {
                rename_file_processor = DependencyOf<IRenameFileProcessor>();
                package_to_clone = new Package
                {
                    ClonedPath = @"C:\Temp\Endjin\Templify\tmp-repo\a67013ef-0ec8-405b-9868-fb5bfdcf2dad\Cloned",
                    Manifest = new Manifest
                    {
                        Author = "Howard van Rooijen",
                        Id = Guid.NewGuid(),
                        InstallRoot = @"c:\Temp\Package-Goes-Here",
                        Name = "Temporary Package",
                        Path = @"c:\Temp\Package-Goes-Here",
                        Version = "1.0.0.1",
                        Files = new List<ManifestFile>
                                {
                                    new ManifestFile { File = @"MyApp\Build\placeholder.txt", },
                                    new ManifestFile { File = @"MyApp\ReferencedAssemblies\placeholder.txt", },
                                    new ManifestFile { File = @"MyApp\Solutions\MyApp.Framework\placeholder.txt", },
                                    new ManifestFile { File = @"MyApp\Solutions\MyApp.Infrastructure\placeholder.txt", },
                                    new ManifestFile { File = @"MyApp\Solutions\MyApp.Specifications\placeholder.txt", },
                                    new ManifestFile { File = @"MyApp\Solutions\MyApp.Tasks\placeholder.txt", },
                                    new ManifestFile { File = @"MyApp\Solutions\MyApp.WebCore\placeholder.txt", }, 
                                    new ManifestFile { File = @"MyApp\Solutions\MyApp.WebViews\placeholder.txt", },
                                }
                    },
                    TemplatePath = @"C:\Temp\Endjin\Templify\tmp-repo\a67013ef-0ec8-405b-9868-fb5bfdcf2dad\Template"

            };
        };
    }

    [Subject(typeof(PackageTokeniser))]
    public class when_the_package_tokenise_is_asked_to_tokenise_a_package : specification_for_package_tokeniser
    {
        static Package result;

        Establish context = () => rename_file_processor.Stub(c => c.Process("oldName", "newName")).IgnoreArguments();

        Because of = () => result = subject.Tokenise(package_to_clone, "MyApp");

        It should_ask_the_rename_file_processor_to_rename_the_file = () =>
            rename_file_processor.AssertWasCalled(c => c.Process("oldName", "newName"), r => r.IgnoreArguments());
    }
}