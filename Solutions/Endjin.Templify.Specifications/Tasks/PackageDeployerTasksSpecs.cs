#region License

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#endregion

namespace Endjin.Templify.Specifications.Tasks
{
    #region Using Directives

    using System.Collections.Generic;
    using System.Linq;

    using Endjin.Templify.Domain.Contracts.Packager.Notifiers;
    using Endjin.Templify.Domain.Contracts.Packager.Processors;
    using Endjin.Templify.Domain.Contracts.Packages;
    using Endjin.Templify.Domain.Contracts.Tasks;
    using Endjin.Templify.Domain.Domain.Packages;
    using Endjin.Templify.Domain.Tasks;

    using Machine.Specifications;
    using Machine.Specifications.AutoMocking.Rhino;

    using Rhino.Mocks;

    #endregion

    public abstract class specification_for_package_deployer_tasks : Specification<IPackageDeployerTasks, PackageDeployerTasks>
    {
        protected static IPackageDeploymentProcessor this_package_deployment_processor;
        protected static IPackageProcessor the_package_processor;
        protected static IPackageRepository the_package_repository;
        protected static IProgressNotifier the_progress_notifier;
        protected static Package the_package;

        protected static string the_package_name;

        Establish context = () =>
        {
            this_package_deployment_processor = DependencyOf<IPackageDeploymentProcessor>();
            the_package_processor = DependencyOf<IPackageProcessor>();
            the_package_repository = DependencyOf<IPackageRepository>();
            the_progress_notifier = DependencyOf<IProgressNotifier>();
            the_package_name = "sharp-architecture-v1.6.0.0";
            the_package = new Package
                {
                    Manifest = new Manifest { Tokens = new List<string> { "__NAME__" } }
                };

            the_package_repository.Stub(x => x.FindOne(the_package_name)).Return(the_package);
        };
    }

    [Subject(typeof(PackageDeployerTasks))]
    public class when_the_package_deployer_tasks_is_asked_to_retrieve_tokens_for_a_package : specification_for_package_deployer_tasks
    {
        static IEnumerable<string> result;

        Because of = () => result = subject.RetrieveTokensForPackage(the_package_name);

        It should_return_one_token = () => result.Count().ShouldEqual(1);
        It should_return_the_correct_token = () => result.First().ShouldEqual("__NAME__");
    }
}